import React, { useState } from 'react'; import { Button } from '@/components/ui/button'; import { Card, CardContent } from '@/components/ui/card'; import { Input } from '@/components/ui/input'; import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'; import { Upload, Send } from 'lucide-react'; import pdfjsLib from 'pdfjs-dist'; import * as docx from 'docx-preview'; import { v4 as uuidv4 } from 'uuid';

function extractTextFromPDF(file) { return new Promise((resolve) => { const reader = new FileReader(); reader.onload = async function () { const typedArray = new Uint8Array(reader.result); const pdf = await pdfjsLib.getDocument(typedArray).promise; let text = ''; for (let i = 1; i <= pdf.numPages; i++) { const page = await pdf.getPage(i); const content = await page.getTextContent(); const pageText = content.items.map(item => item.str).join(' '); text += pageText + ' '; } resolve(text); }; reader.readAsArrayBuffer(file); }); }

function extractTextFromDocx(file) { return new Promise((resolve) => { const reader = new FileReader(); reader.onload = async function () { const container = document.createElement('div'); await docx.renderAsync(reader.result, container); resolve(container.innerText); }; reader.readAsArrayBuffer(file); }); }

function generateQuiz(text) { return [ { type: 'mcq', question: 'Where does photosynthesis occur?', options: ['Mitochondria', 'Chloroplast', 'Nucleus', 'Ribosome'], answer: 'Chloroplast' }, { type: 'truefalse', question: 'The mitochondria is the powerhouse of the cell.', answer: 'True' }, ]; }

function generateFlashcards(text) { return [ { front: 'Mitochondria', back: 'Powerhouse of the cell' }, { front: 'Boiling point of water', back: '100Â°C' }, ]; }

function scheduleRevision(flashcards) { return flashcards.map((fc, index) => ({ ...fc, reviewDate: new Date(Date.now() + (index + 1) * 86400000) })); }

async function fetchChatGPTResponse(message) { const res = await fetch('/api/chat', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ message }) }); const data = await res.json(); return data.response; }

export default function EducationApp() { const [uploadedContent, setUploadedContent] = useState(''); const [quiz, setQuiz] = useState([]); const [flashcards, setFlashcards] = useState([]); const [scheduledReview, setScheduledReview] = useState([]); const [chatMessages, setChatMessages] = useState([]); const [chatInput, setChatInput] = useState('');

const handleFileUpload = async (e) => { const file = e.target.files[0]; if (!file) return; const ext = file.name.split('.').pop(); let text = '';

if (ext === 'pdf') {
  text = await extractTextFromPDF(file);
} else if (ext === 'docx') {
  text = await extractTextFromDocx(file);
} else {
  alert('Unsupported file type. Only PDF and DOCX allowed.');
  return;
}

const fileId = uuidv4();
localStorage.setItem(fileId, text);
setUploadedContent(text);

};

const createQuiz = () => { setQuiz(generateQuiz(uploadedContent)); };

const createFlashcards = () => { const cards = generateFlashcards(uploadedContent); setFlashcards(cards); setScheduledReview(scheduleRevision(cards)); };

const handleSendChat = async () => { if (!chatInput.trim()) return; const newMessage = { sender: 'user', text: chatInput }; setChatMessages(prev => [...prev, newMessage]);

const response = await fetchChatGPTResponse(chatInput);
const aiMessage = { sender: 'ai', text: response };
setChatMessages(prev => [...prev, aiMessage]);
setChatInput('');

};

return ( <div className="p-4 max-w-6xl mx-auto"> <h1 className="text-2xl font-bold mb-4">Education Assistant App</h1> <div className="mb-4 flex items-center gap-2"> <Input type="file" onChange={handleFileUpload} /> <Button onClick={createQuiz}>Generate Quiz</Button> <Button onClick={createFlashcards}>Generate Flashcards</Button> </div>

<Tabs defaultValue="quiz" className="mt-4">
    <TabsList>
      <TabsTrigger value="quiz">Quiz</TabsTrigger>
      <TabsTrigger value="flashcards">Flashcards</TabsTrigger>
      <TabsTrigger value="review">Revision</TabsTrigger>
      <TabsTrigger value="ai">AI Assistant</TabsTrigger>
    </TabsList>

    <TabsContent value="quiz">
      <div className="space-y-4 mt-2">
        {quiz.map((q, i) => (
          <Card key={i}>
            <CardContent className="p-4">
              <p className="font-semibold">{q.question}</p>
              {q.type === 'mcq' && (
                <ul className="list-disc pl-5">
                  {q.options.map((opt, idx) => <li key={idx}>{opt}</li>)}
                </ul>
              )}
              {q.type === 'truefalse' && <p>Answer: {q.answer}</p>}
            </CardContent>
          </Card>
        ))}
      </div>
    </TabsContent>

    <TabsContent value="flashcards">
      <div className="grid grid-cols-2 gap-4 mt-2">
        {flashcards.map((fc, i) => (
          <Card key={i}>
            <CardContent className="p-4">
              <p className="font-bold">{fc.front}</p>
              <p className="text-muted-foreground">{fc.back}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </TabsContent>

    <TabsContent value="review">
      <div className="grid grid-cols-2 gap-4 mt-2">
        {scheduledReview.map((fc, i) => (
          <Card key={i}>
            <CardContent className="p-4">
              <p className="font-bold">{fc.front}</p>
              <p className="text-muted-foreground">{fc.back}</p>
              <p className="text-xs text-gray-500">Review on: {fc.reviewDate.toDateString()}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </TabsContent>

    <TabsContent value="ai">
      <div className="flex flex-col gap-4 mt-2">
        <div className="bg-gray-100 p-4 rounded max-h-96 overflow-y-auto">
          {chatMessages.map((msg, idx) => (
            <div key={idx} className={`mb-2 ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>
              <p className={`inline-block px-3 py-2 rounded-lg ${msg.sender === 'user' ? 'bg-blue-200' : 'bg-green-200'}`}>{msg.text}</p>
            </div>
          ))}
        </div>
        <div className="flex gap-2">
          <Input value={chatInput} onChange={(e) => setChatInput(e.target.value)} placeholder="Ask the AI anything..." />
          <Button onClick={handleSendChat}><Send size={16} /></Button>
        </div>
      </div>
    </TabsContent>
  </Tabs>
</div>

); }

